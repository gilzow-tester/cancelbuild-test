# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: app

# The runtime the application uses.
type: php:8.1

dependencies:
    php:
        composer/composer: '^2'

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
  database: "dbb:mysql"
  redis: 'cache:redis'

build:
  flavor: none

# Add additional PHP extensions.
runtime:
  extensions:
    - iconv
    - dom
    - simplexml
    - exif
    - opcache
    - imagick
    - fileinfo
    - apcu

variables:
  php:
      memory_limit: 128M

# The 'mounts' describe writable, persistent filesystem mounts in the application.
mounts:
    "/var":
      source: "local"
      source_path: "var"
    "/web/var":
      source: "local"
      source_path: "web_var"
    "/pimcore":
      source: "local"
      source_path: "pimcore"
    "/web/pimcore":
      source: "local"
      source_path: "web_pimcore"
    "/public/bundles":
      source: "local"
      source_path: "web_bundles"
    "/config/local":
      source: "local"
      source_path: "config_local"

# The configuration of app when it is exposed to the web.
web:
  locations:
    '/':
      root: public
      passthru: "/index.php"
      allow: true
      rules:
        '^/videos/(?<resource>.*)$':
          allow: true
        '^/img/(?<resource>.*)$':
          allow: true
        '^/static/(?<resource>.*)$':
          allow: true

# The size of the persistent disk of the application (in MB).
disk: 7168

# The hooks executed at various points in the lifecycle of the application.
hooks:
  build: |
    set -e

    bash install-redis.sh 5.3.7

    # This is needed for the installer in the deploy hook.
    curl -sS https://platform.sh/cli/installer | php

    composer install --no-ansi --no-progress --prefer-dist --no-scripts
      
    # install our pimcore dependencies that are not available in this container image      
    ./platform-scripts/install-brew-pack.sh gcc graphviz exiftool poppler poppler-utils ghostscript zopfli 
      
    # Make sure we have our target application directory created
    if [ ! -d "${PLATFORM_APP_DIR}/.libreoffice" ]; then
      echo "creating libreoffice directory"
      mkdir -p "${PLATFORM_APP_DIR}/.libreoffice/bin"
    fi
      
    # Make sure we have a temp directory to store our libreoffice stuff  
    if [ ! -d "${PLATFORM_CACHE_DIR}/libreofficetmp" ]; then
      mkdir "${PLATFORM_CACHE_DIR}/libreofficetmp"
    fi
      
    cd "${PLATFORM_CACHE_DIR}/libreofficetmp"
      
    # have we already extracted the contents from the AppImage?  
    if [ ! -d "./squashfs-root" ]; then
      # image hasnt been extracted. do we even have the image?
      if [ ! -f LibreOffice-still.basic-x86_64.AppImage ]; then
        echo "downloading LibreOffice appimage" 
        wget https://libreoffice.soluzioniopen.com/stable/still/LibreOffice-still.basic-x86_64.AppImage
      fi
     
      # make sure we can execute it 
      chmod a+x LibreOffice-still.basic-x86_64.AppImage
      
      # extract the contents
      echo "Extracting the contents of the LibreOffice AppImage"
      ./LibreOffice-still.basic-x86_64.AppImage --appimage-extract
      ls -al ./squashfs-root/
      #now let's delete the AppImage to free up some space
      rm LibreOffice-still.basic-x86_64.AppImage
    fi
      
    # now copy the contents of squashfs-root/opt/libreoffice7.2/program/ to /app/.libreoffice/bin/
    echo "Copying libreoffice files to ${PLATFORM_APP_DIR}/.libreoffice/bin... Files copied: "
    cp -Rvf ./squashfs-root/opt/libreoffice7.2/program/* "${PLATFORM_APP_DIR}/.libreoffice/bin/" | wc -l
      
    #add our libreoffice path to PATH
    echo 'export PATH="'$PLATFORM_APP_DIR'/.libreoffice/bin${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.profile"
      
    #next up is facedetect. https://gitlab.com/wavexx/facedetect/-/tree/master/
    if [ ! -f "${PLATFORM_CACHE_DIR}/facedetect" ]; then
      wget -P "${PLATFORM_CACHE_DIR}" https://gitlab.com/wavexx/facedetect/-/blob/5f9b9121001bce20f7d87537ff506fcc90df48ca/facedetect
      chmod a+x "${PLATFORM_CACHE_DIR}/facedetect"
    fi
    cp -vf "${PLATFORM_CACHE_DIR}/facedetect" "${PLATFORM_APP_DIR}/.libreoffice/bin/facedetect"
      
    #next is exiftool
    if [ ! -d "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.44" ]; then
      wget -P "${PLATFORM_CACHE_DIR}" https://exiftool.org/Image-ExifTool-12.44.tar.gz
      cd "${PLATFORM_CACHE_DIR}"
      tar -xvf Image-ExifTool-12.44.tar.gz
      # get rid of the archive since we've cached the contents
      rm "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.44.tar.gz"
      cd "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.44/"
      perl Makefile.PL
      #perl "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.44/Makefile.PL"
    fi
    
    #make sure we have a bin in .global
    mkdir -p "${PLATFORM_APP_DIR}/.global/bin"
    cp -Rvf "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.44/lib" "${PLATFORM_APP_DIR}/.global/bin"
    cp -vf "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.44/exiftool" "${PLATFORM_APP_DIR}/.global/bin"
   

  deploy: |
    if [ ! -f web/var/.platform.installed ]; then
        platform sql "ALTER DATABASE CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        # These values are for the inital setup only.  You really need to change them
        # after the site is installed.
        export PIMCORE_INSTALL_ADMIN_USERNAME='admin'
        export PIMCORE_INSTALL_ADMIN_PASSWORD='admin'
        ./vendor/bin/pimcore-install --no-interaction --ignore-existing-config --no-debug
        touch web/var/.platform.installed
    fi

    # Clear env cached
    ./bin/console cache:clear

# The configuration of scheduled execution.
crons:
    pimcore_cron:
        spec: "*/19 * * * *"
        cmd: "bin/console maintenance"

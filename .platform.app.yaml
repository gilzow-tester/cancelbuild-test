# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: app

# The runtime the application uses.
type: php:8.1

dependencies:
    php:
        composer/composer: '^2'

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
  database: "dbc:mysql"
  redis: 'cache:redis'

build:
  flavor: none

# Add additional PHP extensions.
runtime:
  extensions:
    - iconv
    - dom
    - simplexml
    - exif
    - opcache
    - imagick
    - fileinfo
    - apcu

variables:
  php:
      memory_limit: 128M

# The 'mounts' describe writable, persistent filesystem mounts in the application.
mounts:
    # According to https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Setup_and_Hosting/File_Permissions.html
    # Pimcore should only need write access to ./var and ./public/var
    "/var":
      source: "local"
      source_path: "var"
    "/public/var":
      source: "local"
      source_path: "public_var"
    #"/pimcore":
      #source: "local"
      #source_path: "pimcore"
    #"/web/pimcore":
      #source: "local"
      #source_path: "web_pimcore"
    #The link above doesn't mention /public/bundles, but in testing we DO need it to be writable.
    "/public/bundles":
      source: "local"
      source_path: "web_bundles"
    #similar to above, though its not mentioned, something needs to write database.yaml to this location
    "/config/local":
      source: "local"
      source_path: "config_local"

# The configuration of app when it is exposed to the web.
web:
  locations:
    '/':
      root: public
      passthru: "/index.php"
      allow: true
      rules:
        '^/videos/(?<resource>.*)$':
          allow: true
        '^/img/(?<resource>.*)$':
          allow: true
        '^/static/(?<resource>.*)$':
          allow: true

# The size of the persistent disk of the application (in MB).
disk: 7168

# The hooks executed at various points in the lifecycle of the application.
hooks:
  build: |
    set -e
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"
      
    bash install-redis.sh 5.3.7

    # This is needed for the installer in the deploy hook.
    curl -sS https://platform.sh/cli/installer | php

    composer install --no-ansi --no-progress --prefer-dist --no-scripts
      
    # install our pimcore dependencies that are not available in this container image      
    ./platform-scripts/install-brew-pack.sh gcc graphviz exiftool poppler poppler-utils ghostscript zopfli 
    echo "just finished doing brew installs"
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"  
    # Make sure we have our target application directory created
    if [ ! -d "${PLATFORM_APP_DIR}/.libreoffice" ]; then
      echo "creating libreoffice directory"
      mkdir -p "${PLATFORM_APP_DIR}/.libreoffice/bin"
    fi
      
    # Make sure we have a temp directory to store our libreoffice stuff  
    if [ ! -d "${PLATFORM_CACHE_DIR}/libreofficetmp" ]; then
      mkdir "${PLATFORM_CACHE_DIR}/libreofficetmp"
    fi
      
    cd "${PLATFORM_CACHE_DIR}/libreofficetmp"
      
    # have we already extracted the contents from the AppImage?  
    if [ ! -d "./squashfs-root" ]; then
      # image hasnt been extracted. do we even have the image?
      if [ ! -f LibreOffice-still.basic-x86_64.AppImage ]; then
        echo "downloading LibreOffice appimage" 
        #wget https://libreoffice.soluzioniopen.com/stable/still/LibreOffice-still.basic-x86_64.AppImage
        wget https://appimage.sys42.eu/LibreOffice-still.basic-x86_64.AppImage
      fi
     
      # make sure we can execute it 
      chmod a+x LibreOffice-still.basic-x86_64.AppImage
      
      # extract the contents
      echo "Extracting the contents of the LibreOffice AppImage"
      ./LibreOffice-still.basic-x86_64.AppImage --appimage-extract
      ls -al ./squashfs-root/
      #now let's delete the AppImage to free up some space
      rm LibreOffice-still.basic-x86_64.AppImage
    fi
     
    echo "Just finished getting libreoffice."
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"
      
    # now copy the contents of squashfs-root/opt/libreoffice7.3/program/ to /app/.libreoffice/bin/
    echo "Copying libreoffice files to ${PLATFORM_APP_DIR}/.libreoffice/bin... Files copied: "
    # @todo, the libreoffice directory name can and WILL Change as the version changes. We need to either designate a
    # specic version, and then allow for a manged upgrade, or check the name of the directory after we run the 
    # --appimage-extract command to find out the name of the directory we're working with.
    cp -Rvf ./squashfs-root/opt/libreoffice7.3/program/* "${PLATFORM_APP_DIR}/.libreoffice/bin/" | wc -l
      
    #add our libreoffice path to PATH
    echo 'export PATH="'$PLATFORM_APP_DIR'/.libreoffice/bin${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.environment"

    echo "just finished up with libreoffice."
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"
      
    #next up is facedetect. https://gitlab.com/wavexx/facedetect/-/tree/master/
    if [ ! -f "${PLATFORM_CACHE_DIR}/facedetect" ]; then
      wget -P "${PLATFORM_CACHE_DIR}" https://gitlab.com/wavexx/facedetect/-/blob/5f9b9121001bce20f7d87537ff506fcc90df48ca/facedetect
      chmod a+x "${PLATFORM_CACHE_DIR}/facedetect"
    fi
    cp -vf "${PLATFORM_CACHE_DIR}/facedetect" "${PLATFORM_APP_DIR}/.libreoffice/bin/facedetect"

    echo "Just finished facedetect."
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"
      
    #next is exiftool
    if [ ! -d "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.47" ]; then
      wget -P "${PLATFORM_CACHE_DIR}" https://exiftool.org/Image-ExifTool-12.47.tar.gz
      cd "${PLATFORM_CACHE_DIR}"
      tar -xvf Image-ExifTool-12.47.tar.gz
      # get rid of the archive since we've cached the contents
      rm "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.47.tar.gz"
      cd "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.47/"
      perl Makefile.PL
    fi
      
    echo "Just finished exiftool."
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"
    
    #make sure we have a bin in .global
    mkdir -p "${PLATFORM_APP_DIR}/.global/bin"
    cp -Rvf "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.47/lib" "${PLATFORM_APP_DIR}/.global/bin"
    cp -vf "${PLATFORM_CACHE_DIR}/Image-ExifTool-12.47/exiftool" "${PLATFORM_APP_DIR}/.global/bin"
   
    #now Chromium!
    if [ ! -d "${PLATFORM_CACHE_DIR}/chromium" ] || [ ! -d "${PLATFORM_CACHE_DIR}/chromium/.git"  ]; then
      git clone https://github.com/scheib/chromium-latest-linux.git "${PLATFORM_CACHE_DIR}/chromium/"   
    else 
      git -C "${PLATFORM_CACHE_DIR}/chromium/" pull origin master
    fi
      
    cd "${PLATFORM_CACHE_DIR}/chromium" 
      
    bash "${PLATFORM_CACHE_DIR}/chromium/update.sh"
    printf "contents of %s:" "${PLATFORM_CACHE_DIR}/chromium"
    ls -al "${PLATFORM_CACHE_DIR}/chromium"
    #now we need to copy the contents of the symlink "latest" over into the app directory
    mkdir -p "${PLATFORM_APP_DIR}/.global/bin/chromium"
    cp -Rvf "${PLATFORM_CACHE_DIR}/chromium/latest/." "${PLATFORM_APP_DIR}/.global/bin/chromium"  
    echo 'export PATH="'$PLATFORM_APP_DIR'/.global/bin/chromium${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.environment"

    echo "Just finished chromium."
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"
      
    # And last we have updating ImageMagik to v7
    if [ ! -d "${PLATFORM_CACHE_DIR}/magick" ]; then 
      mkdir -p "${PLATFORM_CACHE_DIR}/magick"
    fi
      
    cd "${PLATFORM_CACHE_DIR}/magick"
    
    # Have we already extracted the files?  
    if [ ! -d squashfs-root ]; then
        echo "Retrieving updated imagick binaries..."
        # ok do we even have the original appimage file?
        if [ ! -f magick ]; then
          echo "Retrieving imagick AppImage file..."
          wget -P "${PLATFORM_CACHE_DIR}/magick" https://imagemagick.org/archive/binaries/magick
          chmod a+x magick
        fi
      
        # Extract the files
        echo "Extracting imagick binaries from AppImage file..."
        ./magick --appimage-extract
        #remove the original download to free up some space
        rm -f magick
    fi
      
    # make sure we have a directory in the app location
    echo "Creating imagick directory in app directory..."
    mkdir -p "${PLATFORM_APP_DIR}/.imagick/bin"
    mkdir -p "${PLATFORM_APP_DIR}/.imagick/lib"  
      
    #now copy our files from squashfs-root/usr/bin/ to 
    printf "Copying imagick files from %s to %s... \n" "${PLATFORM_CACHE_DIR}/magick/squashfs-root/usr/" "${PLATFORM_APP_DIR}/.imagick/"
    cp -Rvf ./squashfs-root/usr/bin/* "${PLATFORM_APP_DIR}/.imagick/bin"
    cp -Rvf ./squashfs-root/usr/lib/* "${PLATFORM_APP_DIR}/.imagick/lib"
    #last add PATH to PATH
    echo "Adding imagick bin path to PATH"  
    echo 'export PATH="'$PLATFORM_APP_DIR'/.imagick/bin/${PATH+:$PATH}";' >> "${PLATFORM_APP_DIR}/.environment"

    echo "Just finished imagick."
    echo "How much space is build cache taking up?"
    du -sh "${PLATFORM_CACHE_DIR}"

  deploy: |
    if [ ! -f public/var/.platform.installed ]; then
        platform sql "ALTER DATABASE CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        # These values are for the inital setup only.  You really need to change them
        # after the site is installed.
        export PIMCORE_INSTALL_ADMIN_USERNAME='admin'
        export PIMCORE_INSTALL_ADMIN_PASSWORD='admin'
        ./vendor/bin/pimcore-install --no-interaction --ignore-existing-config --no-debug
        touch public/var/.platform.installed
    fi

    # Clear env cached
    ./bin/console cache:clear

# The configuration of scheduled execution.
crons:
    pimcore_cron:
        spec: "*/19 * * * *"
        cmd: "bin/console maintenance"
